name: 1.0.0$(Rev:r)

trigger:
  - main

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  solutionPath: '**/*.sln'
  libraryProject: 'StringLibrary/StringLibrary.csproj'
  
  # Versioning
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: '0'
  
  # Artifacts Feed Configuration - MUST UPDATE THESE!
  organizationName: 'kpat1045'              # From your dev.azure.com URL
  projectName: 'StringLibrary'        # The DevOps project containing the feed
  feedName: 'UpperCaseFeed'                 # Your feed name (case-sensitive)

pool:
  name: MyCustomPool                        # Your self-hosted agent pool
  demands:
  - Agent.OS -equals Windows_NT             # Requires Windows agent
  # - agent.name -equals YourAgentName      # Optional: Specific agent

steps:
  # 1. Checkout code
  - checkout: self
    clean: true
    fetchDepth: 1

  # 2. Debug: Show environment and feed URL
  - powershell: |
      Write-Host "##[section]Agent Information:"
      Write-Host "OS: $env:Agent_OS"
      Write-Host "Name: $env:Agent_Name"
      Write-Host "##[section]Project Files:"
      Get-ChildItem -Recurse -Filter *.csproj | Select-Object FullName
      Write-Host "##[section]Feed URL that will be used:"
      Write-Host "https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json"
    displayName: 'Show Environment Info'

  # 3. Install .NET 8 SDK
  - task: UseDotNet@2
    displayName: 'Install .NET 8 SDK'
    inputs:
      version: $(dotNetVersion)
      performMultiLevelLookup: true

  # 4. Restore packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore Packages'
    inputs:
      command: 'restore'
      projects: '$(solutionPath)'
      feedsToUse: 'select'
      vstsFeed: '$(feedName)'

  # 5. Build solution
  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: 'build'
      projects: '$(solutionPath)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  # 6. Pack NuGet package
  - task: DotNetCoreCLI@2
    displayName: 'Create NuGet Package'
    inputs:
      command: 'pack'
      packagesToPack: '$(libraryProject)'
      configuration: $(buildConfiguration)
      outputDir: '$(Build.ArtifactStagingDirectory)'
      nobuild: true
      includesymbols: true
      arguments: '-p:Version=$(majorVersion).$(minorVersion).$(patchVersion)'

  # 7. Authenticate with Azure Artifacts
  - task: NuGetAuthenticate@1
    displayName: 'Authenticate with Azure Artifacts'

  # 8. Push to Azure Artifacts
  - task: NuGetCommand@2
    displayName: 'Push to Azure Artifacts'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: '$(projectName)/$(feedName)'
      allowPackageConflicts: false