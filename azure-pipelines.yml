name: 1.0.0$(Rev:r)

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  solutionPath: '**/*.sln'
  libraryProject: 'StringLibrary/StringLibrary.csproj'
  
  # Version configuration
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: '0'
  
  # Artifacts Feed Configuration
  organizationName: 'kpat1045'
  projectName: 'StringLibrary'  # Update with your exact project name
  feedName: 'UpperCaseFeed'           # Case-sensitive feed name

jobs:
- job: Build
  timeoutInMinutes: 30
  pool:
    name: MyCustomPool
    demands:
    - Agent.OS -equals Windows_NT     # Requires Windows agent

  steps:
    # 1. Checkout code
    - checkout: self
      clean: true

    # 2. Environment verification
    - powershell: |
        Write-Host "##[section]Build Environment:"
        Write-Host "Agent: $($env:AGENT_NAME)"
        Write-Host "Directory: $(Get-Location)"
        Write-Host "Project Files:"
        Get-ChildItem -Recurse -Filter *.csproj | Select-Object FullName
      displayName: 'Verify Environment'

    # 3. Install .NET 8 SDK
    - task: UseDotNet@2
      displayName: 'Install .NET 8'
      inputs:
        version: $(dotNetVersion)
        performMultiLevelLookup: true

    # 4. Restore packages
    - task: DotNetCoreCLI@2
      displayName: 'Restore Packages'
      inputs:
        command: 'restore'
        projects: '$(solutionPath)'
        feedsToUse: 'select'
        vstsFeed: '$(feedName)'

    # 5. Build solution
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solutionPath)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # 6. Create NuGet package
    - task: DotNetCoreCLI@2
      displayName: 'Pack NuGet'
      inputs:
        command: 'pack'
        packagesToPack: '$(libraryProject)'
        configuration: $(buildConfiguration)
        outputDir: '$(Build.ArtifactStagingDirectory)'
        arguments: '-p:Version=$(majorVersion).$(minorVersion).$(patchVersion)-ci$(Build.BuildId)'

    # 7. Authenticate with Azure Artifacts
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
      inputs:
        forceReinstallCredentialProvider: true

    # 8. Push to Azure Artifacts
    - task: NuGetCommand@2
      displayName: 'Push Package'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '$(feedName)'
        allowPackageConflicts: false