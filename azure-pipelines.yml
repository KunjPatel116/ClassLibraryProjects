name: 1.0.0$(Build.BuildId)

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  organizationName: 'kpat1045'
  projectName: 'StringLibrary'
  feedName: 'UpperCaseFeed'

stages:
- stage: Build
  jobs:
  - job: BuildAndPack
    pool:
      name: MyCustomPool
      demands:
      - Agent.OS -equals Windows_NT
    steps:
    - checkout: self
      clean: true

    # Simplified feed check - just verify we can list sources
    - powershell: |
        Write-Host "##[section]Listing available NuGet sources:"
        dotnet nuget list source
      displayName: 'Verify NuGet Connectivity'

    # Install .NET 8
    - task: UseDotNet@2
      displayName: 'Install .NET 8'
      inputs:
        version: $(dotNetVersion)
        performMultiLevelLookup: true

    # Build and pack
    - task: DotNetCoreCLI@2
      displayName: 'Build & Pack'
      inputs:
        command: 'pack'
        projects: 'StringLibrary/StringLibrary.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -p:Version=$(Build.BuildNumber)'

    # Authenticate with Azure Artifacts (CRITICAL STEP)
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
      inputs:
        forceReinstallCredentialProvider: true

    # Push using GUID instead of name (more reliable)
    - task: DotNetCoreCLI@2
      displayName: 'Push to Azure Artifacts'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
        feedsToUse: 'select'
        vstsFeed: 'abc5fc66-5b25-45fb-b9a7-aeaaeacf35be'  # From your feed's JSON response
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- stage: Test
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: RunTests
    pool:
      name: MyCustomPool
    steps:
    - checkout: self
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'