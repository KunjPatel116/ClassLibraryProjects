name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - main

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  # Updated paths based on your actual structure
  solutionPath: '**/*.sln'
  libraryProject: 'StringLibrary/StringLibrary.csproj' # Corrected path
  consoleProject: 'ShowCase/ShowCase.csproj' # Your console app

pool:
  name: MyCustomPool
  demands:
    - agent.name -equals MyNewAgent

steps:
  # 1. Checkout code
  - checkout: self
    clean: true
    fetchDepth: 1

  # 2. Show exact file structure
  - powershell: |
      Write-Host "##[section]Current directory: $(Get-Location)"
      Write-Host "##[section]All project files:"
      Get-ChildItem -Recurse -Filter *.csproj | Select-Object FullName
      Write-Host "##[section]All files:"
      tree /F /A
    displayName: 'Debug: Show file structure'

  # 3. Install .NET 8 SDK
  - task: UseDotNet@2
    displayName: 'Install .NET 8 SDK'
    inputs:
      version: $(dotNetVersion)
      performMultiLevelLookup: true

  # 4. Restore packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore packages'
    inputs:
      command: 'restore'
      projects: '$(solutionPath)'
      feedsToUse: 'select'
      vstsFeed: 'UpperCaseFeed'

  # 5. Build solution
  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    inputs:
      command: 'build'
      projects: '$(solutionPath)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  # 6. Pack NuGet package
  - powershell: |
      # Pack the library
      dotnet pack '$(libraryProject)' `
        --configuration $(buildConfiguration) `
        --output '$(Build.ArtifactStagingDirectory)' `
        --include-symbols `
        --include-source `
        -p:Version=1.0.0$(Rev:.r)
      
      # Verify package was created
      if (-Not (Test-Path -Path '$(Build.ArtifactStagingDirectory)/*.nupkg')) {
        Write-Host "##vso[task.logissue type=error]No packages were created"
        Get-ChildItem '$(Build.ArtifactStagingDirectory)'
        exit 1
      }
    displayName: 'Pack NuGet package'

  # 7. Push to Azure Artifacts
  - task: NuGetAuthenticate@1
    displayName: 'Authenticate with Azure Artifacts'

  - task: NuGetCommand@2
    displayName: 'Push to UpperCaseFeed'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'UpperCaseFeed'

  # 8. Build and publish console app (optional)
  - task: DotNetCoreCLI@2
    displayName: 'Publish console app'
    inputs:
      command: 'publish'
      projects: '$(consoleProject)'
      arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)/app'
      publishWebProjects: false