name: 1.0.0$(Build.BuildId)

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  organizationName: 'kpat1045'
  projectName: 'StringLibrary'
  feedName: 'StringLibraryFeed'

stages:
- stage: Build
  jobs:
  - job: BuildAndPack
    pool:
      name: MyCustomPool
      demands:
      - Agent.OS -equals Windows_NT
    steps:
    - checkout: self
      clean: true

    # Install .NET 8
    - task: UseDotNet@2
      displayName: 'Install .NET 8'
      inputs:
        version: $(dotNetVersion)
        performMultiLevelLookup: true

    # Build and pack
    - task: DotNetCoreCLI@2
      displayName: 'Build & Pack'
      inputs:
        command: 'pack'
        projects: 'StringLibrary/StringLibrary.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -p:Version=$(Build.BuildNumber)'

    # Configure NuGet authentication (MUST COME BEFORE PUSH)
    - task: NuGetAuthenticate@1
      displayName: 'Authenticate with Azure Artifacts'
      inputs:
        forceReinstallCredentialProvider: true

    # PowerShell-based push with explicit auth (most reliable method)
    - powershell: |
        $packagePath = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Filter *.nupkg | Select-Object -First 1 -ExpandProperty FullName
        $feedUrl = "https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json"
        
        Write-Host "##[section]Pushing package: $packagePath"
        Write-Host "##[section]To feed: $feedUrl"
        
        # Create temporary NuGet config with explicit credentials
        $nugetConfig = @"
<?xml version="1.0" encoding="utf-8"?>
<configuration>
  <packageSources>
    <add key="AzureDevOpsFeed" value="$feedUrl" />
  </packageSources>
  <packageSourceCredentials>
    <AzureDevOpsFeed>
      <add key="Username" value="patel" />
      <add key="ClearTextPassword" value="$(System.AccessToken)" />
    </AzureDevOpsFeed>
  </packageSourceCredentials>
</configuration>
"@
        $configPath = "$(Build.SourcesDirectory)\nuget.config"
        $nugetConfig | Out-File -FilePath $configPath -Encoding utf8
        
        # Execute push with explicit config
        dotnet nuget push "$packagePath" `
          --source "$feedUrl" `
          --api-key AzureArtifacts `
          --config-file "$configPath" `
          --skip-duplicate
        
        # Clean up
        Remove-Item -Path $configPath -Force
      displayName: 'Push to Azure Artifacts'
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- stage: Test
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: RunTests
    pool:
      name: MyCustomPool
    steps:
    - checkout: self
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration)'