name: $(Date:yyyyMMdd)$(Rev:.r)

trigger:
  - main

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  # Update these paths to match your actual project structure
  solutionPath: '**/*.sln'
  libraryProject: 'UpperCaseCheckLibrary/UpperCaseCheckLibrary.csproj' # Explicit relative path
  testProject: 'UpperCaseCheckLibrary.Tests/UpperCaseCheckLibrary.Tests.csproj' # If exists

pool:
  name: MyCustomPool
  demands:
    - agent.name -equals MyNewAgent

steps:
  # 1. Checkout code
  - checkout: self
    clean: true
    fetchDepth: 1

  # 2. Debugging: Show exact file structure
  - powershell: |
      Write-Host "##[section]Current directory:"
      Get-Location
      Write-Host "##[section]All files:"
      Get-ChildItem -Recurse -File | Select-Object FullName
    displayName: 'Debug: Show file structure'

  # 3. Install .NET 8 SDK
  - task: UseDotNet@2
    displayName: 'Install .NET 8 SDK'
    inputs:
      version: $(dotNetVersion)
      performMultiLevelLookup: true

  # 4. Restore packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore packages'
    inputs:
      command: 'restore'
      projects: '$(solutionPath)'
      feedsToUse: 'select'
      vstsFeed: 'UpperCaseFeed'

  # 5. Build solution
  - task: DotNetCoreCLI@2
    displayName: 'Build solution'
    inputs:
      command: 'build'
      projects: '$(solutionPath)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  # 6. Pack NuGet package (with absolute verification)
  - powershell: |
      # Verify project file exists
      if (-Not (Test-Path -Path '$(libraryProject)')) {
        Write-Host "##vso[task.logissue type=error]Project file not found at $(libraryProject)"
        Write-Host "##[section]Available project files:"
        Get-ChildItem -Recurse -Filter *.csproj | Select-Object FullName
        exit 1
      }
      
      # Execute dotnet pack with explicit path
      dotnet pack '$(libraryProject)' `
        --configuration $(buildConfiguration) `
        --output '$(Build.ArtifactStagingDirectory)' `
        --include-symbols `
        --include-source `
        -p:Version=1.0.0$(Rev:.r)
    displayName: 'Pack NuGet package (verified)'

  # 7. Push to Azure Artifacts
  - task: NuGetAuthenticate@1
    displayName: 'Authenticate with Azure Artifacts'

  - task: NuGetCommand@2
    displayName: 'Push to UpperCaseFeed'
    inputs:
      command: 'push'
      packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
      nuGetFeedType: 'internal'
      publishVstsFeed: 'UpperCaseFeed'