name: 1.0.0$(Build.BuildId)

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  organizationName: 'kpat1045'
  projectName: 'StringLibrary'
  feedName: 'UpperCaseFeed'

stages:
- stage: Build
  jobs:
  - job: BuildAndPack
    pool:
      name: MyCustomPool
      demands:
      - Agent.OS -equals Windows_NT
    steps:
    - checkout: self
      clean: true

    # Verify feed exists and is accessible
    - powershell: |
        $feedUrl = "https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json"
        Write-Host "##[section]Verifying feed exists at: $feedUrl"
        
        # Check feed existence using REST API
        $feedApiUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/packaging/feeds?api-version=6.0-preview.1"
        $feeds = Invoke-RestMethod -Uri $feedApiUrl -Headers @{Authorization = "Bearer $(System.AccessToken)"}
        
        if ($feeds.value.name -contains "$(feedName)") {
          Write-Host "##[section]Feed verification successful!"
        } else {
          Write-Host "##vso[task.logissue type=error]Feed '$(feedName)' not found!"
          Write-Host "##[section]Available feeds:"
          $feeds.value | Format-Table name, id -AutoSize
          exit 1
        }
      displayName: 'Verify Feed Exists'
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    # Install .NET 8
    - task: UseDotNet@2
      displayName: 'Install .NET 8'
      inputs:
        version: $(dotNetVersion)
        performMultiLevelLookup: true

    # Build and pack
    - task: DotNetCoreCLI@2
      displayName: 'Build & Pack'
      inputs:
        command: 'pack'
        projects: 'StringLibrary/StringLibrary.csproj'
        arguments: '--configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory) -p:Version=$(Build.BuildNumber)'

    # Debug: List generated packages
    - powershell: |
        Write-Host "##[section]Generated packages:"
        Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)" -Recurse -Filter *.nupkg | ForEach-Object {
          Write-Host $_.FullName
        }
      displayName: 'List Packages'

    # Authenticate with Azure Artifacts
    - task: NuGetAuthenticate@1
      displayName: 'NuGet Authenticate'
      inputs:
        forceReinstallCredentialProvider: true

    # Push to feed with explicit feed specification
    - task: DotNetCoreCLI@2
      displayName: 'Push to Azure Artifacts'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
        feedsToUse: 'select'
        vstsFeed: '$(organizationName)/$(projectName)/$(feedName)'
        publishVstsFeed: '$(feedName)'
      env:
        VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json", "username":"$(System.AccessToken)", "password":"$(System.AccessToken)"}]}'

- stage: Test
  dependsOn: Build
  condition: succeeded()
  jobs:
  - job: RunTests
    pool:
      name: MyCustomPool
    steps:
    - checkout: self
    - task: DotNetCoreCLI@2
      displayName: 'Run Tests'
      inputs:
        command: 'test'
        projects: '**/*Tests/*.csproj'
        arguments: '--configuration $(buildConfiguration) --collect:"XPlat Code Coverage"'