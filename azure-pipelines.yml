name: 1.0.0$(Rev:r)

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  solutionPath: '**/*.sln'
  libraryProject: 'StringLibrary/StringLibrary.csproj'
  
  # Version configuration
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: '0'
  
  # Artifacts Feed Configuration - MUST UPDATE THESE!
  organizationName: 'kpat1045'
  projectName: 'StringLibrary'
  feedName: 'UpperCaseFeed'

jobs:
- job: Build
  strategy:
    maxParallel: 1  # Ensures sequential execution
  timeoutInMinutes: 30  # Prevents long-running jobs
  pool:
    name: MyCustomPool
    demands:
    - Agent.OS -equals Windows_NT
    # Remove agent.name demand to allow any available agent

  steps:
    # 1. Checkout code
    - checkout: self
      clean: true
      fetchDepth: 1

    # 2. Agent diagnostics
    - powershell: |
        Write-Host "##[section]Available Agents in Pool:"
        $apiUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/distributedtask/pools/$(Agent.PoolId)/agents?api-version=6.0"
        $agents = Invoke-RestMethod -Uri $apiUrl -Headers @{
          Authorization = "Bearer $(System.AccessToken)"
        }
        $agents.value | Where-Object { $_.status -eq 'online' } | Format-Table name, status, enabled -AutoSize
        Write-Host "##[section]Current Job Position in Queue:"
        $queueUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/distributedtask/queues/$(Agent.QueueId)/jobs?api-version=6.0"
        $queue = Invoke-RestMethod -Uri $queueUrl -Headers @{
          Authorization = "Bearer $(System.AccessToken)"
        }
        $queue.value | Sort-Object queueTime | Format-Table requestId, queueTime, status -AutoSize
      displayName: 'Show Agent Pool Status'
      env:
        SYSTEM_ACCESSTOKEN: $(System.AccessToken)

    # 3. Install .NET 8 SDK
    - task: UseDotNet@2
      displayName: 'Install .NET 8 SDK'
      inputs:
        version: $(dotNetVersion)
        performMultiLevelLookup: true

    # 4. Restore packages
    - task: DotNetCoreCLI@2
      displayName: 'Restore Packages'
      inputs:
        command: 'restore'
        projects: '$(solutionPath)'
        feedsToUse: 'select'
        vstsFeed: '$(feedName)'

    # 5. Build solution
    - task: DotNetCoreCLI@2
      displayName: 'Build Solution'
      inputs:
        command: 'build'
        projects: '$(solutionPath)'
        arguments: '--configuration $(buildConfiguration) --no-restore'

    # 6. Pack NuGet package
    - task: DotNetCoreCLI@2
      displayName: 'Create NuGet Package'
      inputs:
        command: 'pack'
        packagesToPack: '$(libraryProject)'
        configuration: $(buildConfiguration)
        outputDir: '$(Build.ArtifactStagingDirectory)'
        nobuild: true
        includesymbols: true
        arguments: '-p:Version=$(majorVersion).$(minorVersion).$(patchVersion)-ci$(Build.BuildId)'

    # 7. Authenticate with Azure Artifacts
    - task: NuGetAuthenticate@1
      displayName: 'Authenticate with Azure Artifacts'
      inputs:
        forceReinstallCredentialProvider: true

    # 8. Push to Azure Artifacts
    - task: NuGetCommand@2
      displayName: 'Push to Azure Artifacts'
      inputs:
        command: 'push'
        packagesToPush: '$(Build.ArtifactStagingDirectory)/**/*.nupkg'
        nuGetFeedType: 'internal'
        publishVstsFeed: '$(feedName)'
        allowPackageConflicts: true