name: 1.0.0$(Rev:r)

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  solutionPath: '**/*.sln'
  libraryProject: 'StringLibrary/StringLibrary.csproj'
  
  # Version configuration
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: '0'
  
  # Artifacts Feed Configuration - MUST VERIFY THESE VALUES
  organizationName: 'kpat1045'              # From your dev.azure.com URL
  projectName: 'StringLibrary'        # The DevOps project containing the feed
  feedName: 'UpperCaseFeed'                 # Your feed name (case-sensitive)

pool:
  name: MyCustomPool
  demands:
  - Agent.OS -equals Windows_NT

steps:
  # 1. Checkout code
  - checkout: self
    clean: true

  # 2. Debug information - VERIFY OUTPUT MATCHES YOUR FEED
  - powershell: |
      Write-Host "##[section]Expected Feed URL:"
      $feedUrl = "https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json"
      Write-Host $feedUrl
      Write-Host "##[section]Attempting to access feed..."
      try {
        $response = Invoke-WebRequest -Uri $feedUrl -UseBasicParsing
        Write-Host "##[section]Feed access successful!"
        Write-Host $response.Content
      }
      catch {
        Write-Host "##vso[task.logissue type=error]Feed access failed:"
        Write-Host $_.Exception.Message
      }
    displayName: 'Verify Feed Access'
    env:
      SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  # 3. Install .NET 8 SDK
  - task: UseDotNet@2
    displayName: 'Install .NET 8 SDK'
    inputs:
      version: $(dotNetVersion)
      performMultiLevelLookup: true

  # 4. Restore packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore Packages'
    inputs:
      command: 'restore'
      projects: '$(solutionPath)'
      feedsToUse: 'select'
      vstsFeed: '$(feedName)'

  # 5. Build solution
  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: 'build'
      projects: '$(solutionPath)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  # 6. Pack NuGet package
  - task: DotNetCoreCLI@2
    displayName: 'Create NuGet Package'
    inputs:
      command: 'pack'
      packagesToPack: '$(libraryProject)'
      configuration: $(buildConfiguration)
      outputDir: '$(Build.ArtifactStagingDirectory)'
      nobuild: true
      includesymbols: true
      arguments: '-p:Version=$(majorVersion).$(minorVersion).$(patchVersion)-ci$(Build.BuildId)'

  # 7. Authenticate with Azure Artifacts
  - task: NuGetAuthenticate@1
    displayName: 'Authenticate with Azure Artifacts'
    inputs:
      forceReinstallCredentialProvider: true

  # 8. Push to Azure Artifacts (with feed verification)
  - powershell: |
      $feedUrl = "https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json"
      $packagePath = "$(Build.ArtifactStagingDirectory)/*.nupkg"
      
      # Verify feed exists
      try {
        $response = Invoke-WebRequest -Uri $feedUrl -UseBasicParsing
        Write-Host "##[section]Feed verification successful, pushing package..."
        
        # Push package
        dotnet nuget push $packagePath --source $feedUrl --api-key AzureArtifacts
      }
      catch {
        Write-Host "##vso[task.logissue type=error]Feed verification failed:"
        Write-Host $_.Exception.Message
        Write-Host "##[section]Available feeds in project:"
        $feedsUrl = "$(System.TeamFoundationCollectionUri)$(System.TeamProject)/_apis/packaging/feeds?api-version=6.0-preview.1"
        $feeds = Invoke-RestMethod -Uri $feedsUrl -Headers @{Authorization = "Bearer $(System.AccessToken)"}
        $feeds.value | Format-Table name, id -AutoSize
        exit 1
      }
    displayName: 'Push to Azure Artifacts'
    env:
      VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json", "username":"$(System.AccessToken)", "password":"$(System.AccessToken)"}]}'