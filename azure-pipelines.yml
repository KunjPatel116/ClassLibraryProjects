name: 1.0.0$(Rev:r)

variables:
  buildConfiguration: 'Release'
  dotNetVersion: '8.0.x'
  solutionPath: '**/*.sln'
  libraryProject: 'StringLibrary/StringLibrary.csproj'
  
  # Version configuration
  majorVersion: '1'
  minorVersion: '0'
  patchVersion: '0'
  
  # Artifacts Feed Configuration
  organizationName: 'kpat1045'
  projectName: 'StringLibrary'  # Your actual project name
  feedName: 'UpperCaseFeed'           # Your exact feed name

pool:
  name: MyCustomPool
  demands:
  - Agent.OS -equals Windows_NT

steps:
  # 1. Checkout code
  - checkout: self
    clean: true

  # 2. Install .NET 8 SDK
  - task: UseDotNet@2
    displayName: 'Install .NET 8 SDK'
    inputs:
      version: $(dotNetVersion)
      performMultiLevelLookup: true

  # 3. Restore packages
  - task: DotNetCoreCLI@2
    displayName: 'Restore Packages'
    inputs:
      command: 'restore'
      projects: '$(solutionPath)'
      feedsToUse: 'select'
      vstsFeed: '$(feedName)'

  # 4. Build solution
  - task: DotNetCoreCLI@2
    displayName: 'Build Solution'
    inputs:
      command: 'build'
      projects: '$(solutionPath)'
      arguments: '--configuration $(buildConfiguration) --no-restore'

  # 5. Pack NuGet package
  - task: DotNetCoreCLI@2
    displayName: 'Create NuGet Package'
    inputs:
      command: 'pack'
      packagesToPack: '$(libraryProject)'
      configuration: $(buildConfiguration)
      outputDir: '$(Build.ArtifactStagingDirectory)/packages'
      nobuild: true
      includesymbols: true
      arguments: '-p:Version=$(majorVersion).$(minorVersion).$(patchVersion)-ci$(Build.BuildId)'

  # 6. Publish build artifacts (optional)
  - task: PublishPipelineArtifact@1
    displayName: 'Publish Build Artifacts'
    inputs:
      targetPath: '$(Build.ArtifactStagingDirectory)/packages'
      artifact: 'NuGetPackages'
      publishLocation: 'pipeline'

  # 7. Authenticate with Azure Artifacts
  - task: NuGetAuthenticate@1
    displayName: 'Authenticate with Azure Artifacts'
    inputs:
      forceReinstallCredentialProvider: true

  # 8. Push to Azure Artifacts (confirmed working)
  - powershell: |
      $packagePath = Get-ChildItem -Path "$(Build.ArtifactStagingDirectory)/packages" -Filter *.nupkg | Select-Object -First 1 -ExpandProperty FullName
      $feedUrl = "https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json"
      
      Write-Host "##[section]Pushing package: $($packagePath | Split-Path -Leaf)"
      Write-Host "##[section]Package version: $(majorVersion).$(minorVersion).$(patchVersion)-ci$(Build.BuildId)"
      Write-Host "##[section]Target feed: $feedUrl"
      
      dotnet nuget push "$packagePath" `
        --source "$feedUrl" `
        --api-key AzureArtifacts `
        --skip-duplicate
    displayName: 'Push to Azure Artifacts'
    env:
      VSS_NUGET_EXTERNAL_FEED_ENDPOINTS: '{"endpointCredentials": [{"endpoint":"https://pkgs.dev.azure.com/$(organizationName)/$(projectName)/_packaging/$(feedName)/nuget/v3/index.json", "username":"$(System.AccessToken)", "password":"$(System.AccessToken)"}]}'